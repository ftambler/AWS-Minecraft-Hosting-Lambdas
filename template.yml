AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Server pipeline with API Gateway, SQS, Lambdas, EC2, EFS, and DynamoDB

Parameters:
  LabRoleArn:
    Type: String
    Description: ARN of LabRole provided by AWS Academy

Resources:
  # --- VPC and Networking ---
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: ServerPipelineVPC

  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: ServerPipelineSubnet

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Lambda, EC2, and EFS access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 0.0.0.0/0  # NFS
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # SSH (optional)
      Tags:
        - Key: Name
          Value: ServerPipelineSG

  # --- EFS ---
  EFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: false
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
      FileSystemTags:
        - Key: Name
          Value: ServerPipelineEFS

  EFSMountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref Subnet
      SecurityGroups:
        - !Ref SecurityGroup

  # --- SQS ---
  ServerQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: serverQueue

  # --- DynamoDB ---
  ServerTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ServerRegistry
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: serverId
          AttributeType: S
      KeySchema:
        - AttributeName: serverId
          KeyType: HASH

  # --- Lambda: serverHandler ---
  ServerHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: serverHandler
      CodeUri: lambdas/serverHandler/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !Ref LabRoleArn
      Environment:
        Variables:
          QUEUE_URL: !Ref ServerQueue

  # --- Lambda: createServer ---
  CreateServer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: createServer
      CodeUri: lambdas/createServer/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !Ref LabRoleArn
      Environment:
        Variables:
          TABLE_NAME: !Ref ServerTable
          EFS_ID: !Ref EFSFileSystem
          SECURITY_GROUP_ID: !Ref SecurityGroup
          SUBNET_ID: !Ref Subnet
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt ServerQueue.Arn

  # --- API Gateway ---
  ServerApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: ServerPipelineAPI
      StageName: Prod
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "Server Pipeline API"
        paths:
          /create:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ServerHandler.Arn}/invocations
                httpMethod: POST
                type: aws_proxy

  # --- SSM Parameters ---
  ParamEFSId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /efs/${AWS::Region}/id
      Type: String
      Value: !Ref EFSFileSystem

  ParamQueueUrl:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /sqs/${AWS::Region}/url
      Type: String
      Value: !Ref ServerQueue

  ParamTableName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /dynamodb/${AWS::Region}/table
      Type: String
      Value: !Ref ServerTable

Outputs:
  ApiUrl:
    Description: API Gateway endpoint
    Value: !Sub https://${ServerApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/create

  EFSId:
    Value: !Ref EFSFileSystem
  SubnetId:
    Value: !Ref Subnet
  SecurityGroupId:
    Value: !Ref SecurityGroup
