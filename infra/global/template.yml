AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Global infrastructure stack (Dynamo, API, SQS, OperationSwitch)

Parameters:
  LabRoleArn:
    Type: String
    Description: ARN of LabRole provided by AWS Academy

Resources:
  # --- Cognito ---
  MineHostingUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: mine-hosting-user-pool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireUppercase: true
          RequireNumbers: true
          RequireSymbols: false
      LambdaConfig:
        PostConfirmation: !GetAtt SignUpHandler.Arn

  MineHostingUserPoolClientWeb:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref MineHostingUserPool
      ClientName: web-client
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      AccessTokenValidity: 60
      IdTokenValidity: 60
      RefreshTokenValidity: 30
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: days
      SupportedIdentityProviders:
        - COGNITO
  CognitoInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SignUpHandler.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt MineHostingUserPool.Arn

  # --- SQS (shared across regions)
  ServerQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: globalServerQueue

  # --- DynamoDB (global app state)
  ServerTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: App
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: false
      Tags:
        - Key: Environment
          Value: global
        - Key: Owner
          Value: CloudFormation

  # --- Lambdas ---
  ServerHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: serverHandler
      CodeUri: ../../lambdas/global/serverMessagesHandler/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !Ref LabRoleArn
      Environment:
        Variables:
          QUEUE_URL: !Ref ServerQueue

  # (routes operations + regions)
  GlobalOperationSwitch:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GlobalOperationSwitch
      CodeUri: ../../lambdas/global/operationSwitch/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !Ref LabRoleArn
      Timeout: 30
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt ServerQueue.Arn
  
  GlobalServerStatus:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GlobalServerStatus
      CodeUri: ../../lambdas/global/serverStatus/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !Ref LabRoleArn
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME: !Ref ServerTable
          REGION: !Sub ${AWS::Region}

  GlobalGetResources:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GlobalGetResources
      CodeUri: ../../lambdas/global/getResources/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !Ref LabRoleArn
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME: !Ref ServerTable
          REGION: !Sub ${AWS::Region}
  
  SignUpHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: SignUpHandler
      CodeUri: ../../lambdas/global/signUpHandler/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !Ref LabRoleArn
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME: !Ref ServerTable
          REGION: !Sub ${AWS::Region}

  # --- API Gateway (frontend entrypoint)
  ServerApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: ServerPipelineAPI
      StageName: Prod
      Auth:
        DefaultAuthorizer: CognitoAuth
        Authorizers:
          CognitoAuth:
            UserPoolArn: !GetAtt MineHostingUserPool.Arn
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "Server Pipeline API"
        paths:
          /serverAction:
            post:
              security:
                - CognitoAuth: []
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GlobalOperationSwitch.Arn}/invocations
                httpMethod: POST
                type: aws_proxy

  # --- Instance Profile
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - LabRole
      InstanceProfileName: EC2ServerInstanceProfile

  # --- SSM Parameters for regionless resources ---
  ParamQueueUrl:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /sqs/global/url
      Type: String
      Value: !Ref ServerQueue

  ParamTableName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /dynamodb/global/table
      Type: String
      Value: !Ref ServerTable

  ParamMinecraftVersionBucket:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/global/s3/minecraft-versions/id"
      Type: String
      Value: 760476980933-bucketcito #TODO Hardcodeado
      Description: Bucket Name for Minecraft Jars
  
  ParamDynamoAppTable:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/global/dynamo/table-name"
      Type: String
      Value: !Ref ServerTable
      Description: Global Dynamo Table Name

Outputs:
  ApiUrl:
    Description: Global API Gateway endpoint
    Value: !Sub https://${ServerApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/create
  TableName:
    Value: !Ref ServerTable
  QueueUrl:
    Value: !Ref ServerQueue
