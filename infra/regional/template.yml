AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Regional stack for Minecraft servers (EFS, VPC, EC2, Lambdas)

Parameters:
  LabRoleArn:
    Type: String
    Description: ARN of LabRole provided by AWS Academy

  GlobalRegion:
    Type: String
    Description: The region where the global stack resources (like DynamoDB and SSM parameters) reside

Resources:
  # --- VPC and Networking ---
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ServerPipelineVPC-${AWS::Region}

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ServerPipelinePublicSubnet-${AWS::Region}

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ServerPipelinePrivateSubnet-${AWS::Region}

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow EC2/Lambda/EFS access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 0.0.0.0/0  # NFS
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 25565
          ToPort: 25565
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ServerPipelineSG-${AWS::Region}

  # --- Internet Gateway & Routing ---
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Add a NAT Gateway in the VPC
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PublicSubnet

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable


  # --- EFS ---
  EFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: false
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
      FileSystemTags:
        - Key: Name
          Value: !Sub ServerPipelineEFS-${AWS::Region}

  EFSMountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref PublicSubnet
      SecurityGroups:
        - !Ref SecurityGroup
    
  MyEFSAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref EFSFileSystem
      RootDirectory:
        Path: "/"
        CreationInfo:
          OwnerUid: "0"
          OwnerGid: "0"
          Permissions: "777"
      PosixUser:
        Uid: "0"
        Gid: "0"

  # --- Lambdas (region-specific) ---
  CreateServer:
    Type: AWS::Serverless::Function
    DependsOn:
      - EFSMountTarget
    Properties:
      FunctionName: !Sub createServer-${AWS::Region}
      CodeUri: ../../lambdas/regional/createServer/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !Ref LabRoleArn
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet
      FileSystemConfigs:
        - Arn: !GetAtt MyEFSAccessPoint.Arn
          LocalMountPath: /mnt/efs
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          GLOBAL_REGION: !Ref GlobalRegion
          EFS_PATH: /mnt/efs
  
  DeleteServer:
    Type: AWS::Serverless::Function
    DependsOn:
    - EFSMountTarget
    Properties:
      FunctionName: !Sub deleteServer-${AWS::Region}
      CodeUri: ../../lambdas/regional/deleteServer/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !Ref LabRoleArn
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet
      FileSystemConfigs:
        - Arn: !GetAtt MyEFSAccessPoint.Arn
          LocalMountPath: /mnt/efs
      Environment:
        Variables:
          GLOBAL_REGION: !Ref GlobalRegion
          EFS_PATH: /mnt/efs

  TurnOnServer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub turnOnServer-${AWS::Region}
      CodeUri: ../../lambdas/regional/turnOnServer/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !Ref LabRoleArn
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet
      Environment:
        Variables:
          GLOBAL_REGION: !Ref GlobalRegion
          EFS_ID: !Ref EFSFileSystem
          SECURITY_GROUP_ID: !Ref SecurityGroup
          SUBNET_ID: !Ref PublicSubnet
          REGION: !Ref AWS::Region
          CREDIT_DEDUCTION_LAMBDA: !Ref CreditDeduction

  TurnOffServer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub turnOffServer-${AWS::Region}
      CodeUri: ../../lambdas/regional/turnOffServer/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !Ref LabRoleArn
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet
      Environment:
        Variables:
          GLOBAL_REGION: !Ref GlobalRegion
          REGION: !Ref AWS::Region
  
  CreditDeduction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub creditDeduction-${AWS::Region}
      CodeUri: ../../lambdas/regional/creditDeduction/
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !Ref LabRoleArn
      Timeout: 10
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet
      Environment:
        Variables:
          GLOBAL_REGION: !Ref GlobalRegion
          TURN_OFF_LAMBDA_NAME: !Ref TurnOffServer

  # --- Regional SSM Parameters (mirrors for globals) ---
  ParamEFSId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /efs/${AWS::Region}/id
      Type: String
      Value: !Ref EFSFileSystem

  ParamSecurityGroupId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/sg/${AWS::Region}/id"
      Type: String
      Value: !Ref SecurityGroup

  ParamSubnetId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/subnet/${AWS::Region}/id"
      Type: String
      Value: !Ref PublicSubnet

Outputs:
  VPCId:
    Value: !Ref VPC
  PrivateSubnetId:
    Value: !Ref PrivateSubnet
  SecurityGroupId:
    Value: !Ref SecurityGroup
  EFSId:
    Value: !Ref EFSFileSystem
