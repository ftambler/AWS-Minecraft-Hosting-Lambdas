AWSTemplateFormatVersion: '2010-09-09'
Description: Minecraft server infra (VPC, SQS, EFS, DynamoDB, Lambdas, SSM) for us-east-1

Parameters:
  LabRoleArn:
    Type: String
    Description: ARN of your LabRole for Lambda execution
  Environment:
    Type: String
    Default: prod
    Description: Environment name prefix for resources

Resources:

  # ---------- VPC ----------
  PublicVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-vpc"

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PublicVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs 'us-east-1']
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-public-subnet"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-igw"

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref PublicVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PublicVPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-public-rt"

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and Minecraft traffic
      VpcId: !Ref PublicVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 25565
          ToPort: 25565
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-sg"

  # ---------- SQS ----------
  MinecraftQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Environment}-minecraft-operations"

  # ---------- DynamoDB ----------
  MinecraftTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: minecraft_servers
      AttributeDefinitions:
        - AttributeName: server_name
          AttributeType: S
      KeySchema:
        - AttributeName: server_name
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # ---------- EFS ----------
  MinecraftEFS:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      PerformanceMode: generalPurpose
      LifecyclePolicies:
        - TransitionToIA: AFTER_30_DAYS
      FileSystemTags:
        - Key: Name
          Value: !Sub "${Environment}-efs"

  EFSAccessPoint:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref MinecraftEFS
      SubnetId: !Ref PublicSubnet
      SecurityGroups:
        - !Ref SecurityGroup

  # ---------- SSM Parameters ----------
  SQSParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /sqs/minecraft-operations
      Type: String
      Value: !Ref MinecraftQueue

  VPCParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /vpc/us-east-1/id
      Type: String
      Value: !Ref PublicVPC

  SGParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /sg/us-east-1/id
      Type: String
      Value: !Ref SecurityGroup

  EFSParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /efs/us-east-1/id
      Type: String
      Value: !Ref MinecraftEFS

  # ---------- Lambda Functions ----------
  SendSQSLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: send-minecraft-operation
      Handler: index.lambda_handler
      Runtime: python3.11
      Role: !Ref LabRoleArn
      Code:
        S3Bucket: my-lambda-bucket
        S3Key: send-sqs-message.zip
      Environment:
        Variables:
          SQS_PARAMETER_NAME: /sqs/minecraft-operations

  LaunchServerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: launch-minecraft-server
      Handler: index.lambda_handler
      Runtime: python3.11
      Role: !Ref LabRoleArn
      Code:
        S3Bucket: my-lambda-bucket
        S3Key: launch-server.zip
      Environment:
        Variables:
          REGION: us-east-1

  # ---------- SQS â†’ Lambda event mapping ----------
  SQSEventMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt MinecraftQueue.Arn
      FunctionName: !Ref LaunchServerLambda
      BatchSize: 1
      Enabled: true

Outputs:
  VPCId:
    Value: !Ref PublicVPC
  SubnetId:
    Value: !Ref PublicSubnet
  SecurityGroupId:
    Value: !Ref SecurityGroup
  QueueUrl:
    Value: !Ref MinecraftQueue
  DynamoDBTable:
    Value: !Ref MinecraftTable
  EFSId:
    Value: !Ref MinecraftEFS
  SendSQSLambdaArn:
    Value: !GetAtt SendSQSLambda.Arn
  LaunchServerLambdaArn:
    Value: !GetAtt LaunchServerLambda.Arn
